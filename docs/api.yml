openapi: 3.0.3
info:
  title: Library API
  version: 2.1.0
  description: STD22054
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
  - name: Transactions
  - name: 
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      security:
        - oauth2: 
          - read
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: pageSize
          description: Number of items per page
          schema:
            type: integer
            default: 50
          required: false
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      security:
        - oauth2: 
          - write
          - admin
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{idBook}:
    get:
      summary: Get the availability of a specific book
      tags:
        - Books
      operationId: bookAvailability
      security:
        - oauth2: 
          - read
      parameters:
        - in: path
          name: idBook
          description: return books by given id
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    
  /books/availability:
    get:
      summary: Get all available books or borrowed books 
      operationId: allBooksAvailability
      tags:
        - Books 
      security:
        - oauth2: 
          - read
      parameters:
        - name: availability 
          in: query
          description: The availability we are searching for (true or false)
          schema: 
            type: boolean
          required: true
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  
  /bookTransaction/visitor/{visitorId}:
    get:
      tags:
        - Transactions
      summary: get list of books borrowed by a certain visitor
      operationId: getAllBookTransaction
      security:
        - oauth2: 
          - write
          - admin
      parameters:
        - name: visitorId 
          in: path 
          description: The Id of the visitor
          schema: 
            type: string
          required: true
        - in: query
          name: releaseDateTimeMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: datetime
          required: false
        - in: query
          name: releaseDateTimeMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: datetime
          required: false
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
          
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Update Book's Author
      operationId: updateBookAuthor
      tags:
        - Books
      security:
        - oauth2: 
          - write
          - admin
      parameters:
        - name: bookId
          in: path
          description: The Id of the book to update
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          description: The Id of the book's author
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{pathPagination}:
    get:
      summary: Get authors by pagination
      operationId: getAuthorsByPagination
      tags:
        - Authors
      security:
        - oauth2: 
          - read
      parameters:
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          description: Author list by pagination
          content:
            application/json:
              schema :
                allOf:
                  - $ref: '#/components/schemas/ResponseBodyTemplate'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      security:
        - oauth2: 
          - read
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - in: query
          name: pageSize
          description: Number of items per page
          schema:
            type: integer
            default: 50
          required: false
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema :
                allOf:
                  - $ref: '#/components/schemas/ResponseBodyTemplate'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      security:
        - oauth2: 
          - write
          - admin
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema :
                allOf:
                  - $ref: '#/components/schemas/ResponseBodyTemplate'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/authors:
    put:
      summary: Update book's author in Bulk
      operationId: updateBooksAuthor
      tags:
        - Books
      security:
        - oauth2: 
          - write
          - admin
      requestBody:
        description: List of bookId and authorId pairs to update book authors
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400: 
          $ref: '#/components/responses/400'

        403:

          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/import:
    post:
      summary: import books from Excel or json
      tags:
        - Books
      operationId: importBooks
      security:
        - oauth2: 
          - write
          - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportBook'
          application/vnd.ms-excel:
            schema:
              description: Excel file containing book data
              type: string
              format: binary
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/import:
    post:
      summary: Import authors from Excel or JSON
      tags:
        - Authors
      operationId: importAuthors
      security:
        - oauth2: 
          - write
          - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthors'
          application/vnd.ms-excel:
            schema:
              description: Excel file containing author data
              type: string
              format: binary
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema :
                allOf:
                  - $ref: '#/components/schemas/ResponseBodyTemplate'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/batch-delete:
    delete:
      summary: Batch Delete Authors
      operationId: batchDeleteAuthors
      security:
        - oauth2: 
          - write
          - admin
      tags:
        - Authors
      parameters:
        - in: query
          name: authorIds
          description: Comma-separated list of author IDs to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of authors deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseBodyTemplate'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

             
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      security:
        - oauth2: 
          - write
          - admin
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseBodyTemplate'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors:
    get:
      summary: List of visitor
      tags:
        - Visitor
      operationId: visitorList
      responses:
        200:
          description: Visitor list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseBodyTemplate'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Visitors'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /bookTransaction/book/{bookId}/visitor/{visitorId}:
    put:
      summary: Borrow a book
      tags:
        - Transactions
      operationId: bookTransaction 
      security:
        - oauth2: 
          - write
          - admin
      parameters:
        - in: path
          name: bookId
          description: Id of the books borrowed
          schema:
            type: string
          required: true
        - in: path
          name: visitorId
          description: Id of the visitor who borrow a book
          schema: 
            type: string
          required: true
      responses:
        200:
          description: The book has been borrowed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseBodyTemplate'
                  - type: object
                    properties:
                      body:
                        type: array
                        items: 
                          $ref: '#/components/schemas/BookTransaction'
        400: 
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
components:
  parameters:
    queryPagination:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 1
    pathPagination:
      in: path
      name: pathPagination
      required: true
      schema:
        type: integer
        default: 1
  responses:
    BookList_200:
      description: List of books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookList'
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    403:
      description: Forbiden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Forbiden'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    ImportBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            idAuthor:
              type: string
    ImportAuthors:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    ResponseStatus:
      type: object
      properties:
          code:
            type: integer
            example: 200
          message:
            type: string
            example: OK
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        body:
          type: object
    BookList:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: Internal Server Exception
        body: { }
    Forbiden:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status: 
          code: 403
          message: Forbiden
        body: { }
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: Bad request 
    CrupdateBook:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
    Administrator:
      allOf:
        - $ref: '#/components/schemas/Visitors'
        - type: object
    Visitors:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        available:
          type: boolean
          default: true
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    BookTransaction:
      type: object
      properties:
        bookId:
          type: string
        visitorId:
          type: string
        borrowDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
          default: null
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com
          tokenUrl: https://example.com
          scopes:
            read: Permet la lecture des ressources
            write: Permet l'écriture/modification des ressources
            admin: Accès Administrator



# 2.b.i: UpdateBookAuthor sert à ajouter/modifier
# l'author du livre, donc on a besoin que le bookID
# et authorId

# 2.b.ii UpdateBookAuthor devrait avoir les propriétés
# de CrupdateBook et de Author quand on voudrais 
# faire une modification spécifique au livre

# 3.a les paginations sont nécessaires pour facilité
# les recherches et rétrissir la liste des resultats

# 4.a il est possible de gérer la pagination à traves
# les en-têtes de la requête,
# on peut utiliser la propriété range
